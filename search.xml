<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>shell终端美化</title>
    <url>/2024/05/08/shell%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="打造酷帅的最强shell终端，效率直接快100倍！！！"><a href="#打造酷帅的最强shell终端，效率直接快100倍！！！" class="headerlink" title="打造酷帅的最强shell终端，效率直接快100倍！！！"></a>打造酷帅的最强shell终端，效率直接快100倍！！！</h1><h2 id="什么是shell？"><a href="#什么是shell？" class="headerlink" title="什么是shell？"></a>什么是shell？</h2><p>​		Shell 终端，也被称为命令行接口或控制台，是一种交互式用户界面，允许用户通过键入命令来与操作系统进行交互。</p>
<p>​		在 Shell 终端中，用户可以执行各种各样的操作，例如管理文件和目录，运行程序，监控系统状态，配置系统设置，等等。这些操作都是通过键入特定的命令来实现的。</p>
<p>​		Shell 终端的名称来源于 “shell”，这是一个用于描述用户和操作系统内核之间的接口的术语。Shell 提供了一个解释和执行用户命令的环境，而终端则是用户与 shell 交互的界面。</p>
<p>​		在 Unix 和类 Unix 系统（如 Linux）中，常见的 shell 包括 Bourne shell（sh）、Bourne Again shell（bash）、C shell（csh）、Korn shell（ksh）等。在 Windows 系统中，常见的 shell 包括命令提示符（cmd）和 PowerShell。</p>
<p>​		总的来说，Shell 终端是进行系统管理和开发工作的重要工具，对于理解操作系统的工作原理和进行高效的工作都非常有帮助。</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>​		一个支持全彩的终端，我使用的是Windows terminal</p>
<h3 id="Windows-terminal"><a href="#Windows-terminal" class="headerlink" title="Windows terminal"></a>Windows terminal</h3><p>​		Windows Terminal 是微软开发的一个新的、现代的、功能丰富的、开源的终端应用程序，用于访问命令行工具和 shell，如 Command Prompt、PowerShell 和 WSL (Windows Subsystem for Linux)。它于 2019 年首次发布，旨在提供一个集中的位置，用户可以访问多种命令行接口。</p>
<p>以下是 Windows Terminal 的一些主要特性：</p>
<ol>
<li><strong>多标签界面</strong>：Windows Terminal 允许用户在一个窗口中打开多个标签，每个标签可以运行不同的命令行工具或 shell。</li>
<li><strong>丰富的可定制选项</strong>：用户可以通过修改一个 JSON 文件来定制 Windows Terminal 的许多方面，包括字体、颜色方案、背景图片、透明度等。</li>
<li><strong>GPU 加速文本渲染</strong>：Windows Terminal 使用 GPU 进行文本渲染，提供流畅且高效的用户体验。</li>
<li><strong>Unicode 和 UTF-8 字符支持</strong>：Windows Terminal 支持显示各种 Unicode 字符和表情符号。</li>
<li><strong>支持 PowerShell、命令提示符和 WSL</strong>：Windows Terminal 可以访问 Windows 系统中的各种命令行工具和 shell，包括 PowerShell、命令提示符和 WSL。</li>
</ol>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>根据你安装的主题可能需要一个字体，来做适配，可以看你使用的主题的说明</p>
<h3 id="其他准备"><a href="#其他准备" class="headerlink" title="其他准备"></a>其他准备</h3><p><strong>安装git</strong></p>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">sudo apt install zsh</span><br><span class="line"></span><br><span class="line"># 将 zsh 设置为默认 shell</span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line"></span><br><span class="line"># 检查</span><br><span class="line">echo $SHELL</span><br><span class="line"># 返回 /usr/bin/zsh 即表示成功；若没成功，重启试试看</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p><strong>在 Ubuntu 或其他基于 Debian 的 Linux 系统上</strong>：</p>
<p>首先，打开终端，然后使用 apt-get 命令安装 Zsh：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure></div>

<p>安装完成后，你可以使用 <code>chsh</code> 命令来更改默认的 shell：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure></div>

<p>然后，重新登录或重启你的计算机。</p>
</li>
<li><p><strong>在 Fedora 或其他基于 RPM 的 Linux 系统上</strong>：</p>
<p>打开终端，然后使用 dnf 命令安装 Zsh：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dnf install zsh</span><br></pre></td></tr></table></figure></div>

<p>同样，你可以使用 <code>chsh</code> 命令来更改默认的 shell：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure></div>

<p>然后，重新登录或重启你的计算机。</p>
</li>
<li><p><strong>在 macOS 上</strong>：</p>
<p>macOS Catalina（10.15）及更高版本默认使用 Zsh。如果你使用的是早期版本的 macOS，你可能需要手动安装 Zsh。你可以使用 Homebrew 来安装 Zsh：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure></div>

<p>然后，你可以使用 <code>chsh</code> 命令来更改默认的 shell：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">chsh -s $(which zsh)</span><br></pre></td></tr></table></figure></div>

<p>然后，重新登录或重启你的计算机</p>
<h3 id="配置文件地址"><a href="#配置文件地址" class="headerlink" title="配置文件地址"></a>配置文件地址</h3><p>默认在~&#x2F;.zshrc</p>
<p>没有的话可以新建一个</p>
</li>
</ol>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh my zsh"></a>oh my zsh</h2><p><code>Oh My Zsh</code> 是一个开源的、社区驱动的框架，用于管理 Zsh 配置。它拥有大量的插件和主题，可以帮助用户定制他们的 Zsh 环境，使得命令行操作更加高效、友好。</p>
<p>以下是如何在已经安装了 Zsh 的系统上安装 “Oh My Zsh”：</p>
<ol>
<li><p>首先，确保你的系统上已经安装了 <code>curl</code> 或 <code>wget</code>。如果没有，你可以使用你的包管理器（如 <code>apt</code> 或 <code>brew</code>）来安装。</p>
</li>
<li><p>然后，你可以使用 “Oh My Zsh” 的安装脚本来安装。你可以通过 <code>curl</code> 或 <code>wget</code> 来运行这个脚本：</p>
<p>使用 <code>curl</code>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>或使用 <code>wget</code>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>这个脚本将会自动下载并安装 “Oh My Zsh”，并且将你的默认 shell 设置为 Zsh。</p>
</li>
<li><p>安装完成后，你可以通过编辑 <code>~/.zshrc</code> 文件来定制你的 Zsh 环境。例如，你可以在这个文件中启用插件或更改主题]</p>
<p>上面是官方的教程大概是这个意思，但是国内的话安装是有一点问题的</p>
<p>oh_my_zsh 国内安装修改镜像 直连gitee官方源</p>
<h4 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h4><h5 id="Install-oh-my-zsh-via-curl"><a href="#Install-oh-my-zsh-via-curl" class="headerlink" title="Install oh-my-zsh via curl"></a>Install oh-my-zsh via curl</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://gitee.com/Devkings/oh_my_zsh_install/raw/master/install.sh)&quot;</span><br></pre></td></tr></table></figure></div>

<h5 id="Install-oh-my-zsh-via-wget"><a href="#Install-oh-my-zsh-via-wget" class="headerlink" title="Install oh-my-zsh via wget"></a>Install oh-my-zsh via wget</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(wget https://gitee.com/Devkings/oh_my_zsh_install/raw/master/install.sh </span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="powerlevel10k"><a href="#powerlevel10k" class="headerlink" title="powerlevel10k"></a>powerlevel10k</h2><p>官方地址： <a class="link"   href="https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#oh-my-zsh" >romkatv&#x2F;powerlevel10k: A Zsh theme (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure></div>

<p>主题的设置：Set <code>ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</code> in <code>~/.zshrc</code>.</p>
]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>哪吒监控搭建记录</title>
    <url>/2024/05/07/%E5%93%AA%E5%90%92%E7%9B%91%E6%8E%A7%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="哪吒监控搭建记录"><a href="#哪吒监控搭建记录" class="headerlink" title="哪吒监控搭建记录"></a>哪吒监控搭建记录</h1><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol>
<li>一台可以连接公网的 VPS，防火墙和安全策略需要放行 8008 和 5555 端口，否则会无法访问和无法接收数据。单核 512MB 内存的服务器配置就足以满足大多数使用场景</li>
<li>一个已经设置好 A 记录，指向 Dashboard 服务器 ip 的域名</li>
</ol>
<blockquote>
<p>TIP</p>
<p>如果想使用 CDN，请准备两个域名，一个配置好 CDN 用作公开访问，CDN 需要支持WebSocket 协议；另一个域名不要使用 CDN，用作 Agent 端与 Dashboard 的通信</p>
</blockquote>
<p>3.一个 Github 账号</p>
<h2 id="二、获取-Github-的-Client-ID-和密钥"><a href="#二、获取-Github-的-Client-ID-和密钥" class="headerlink" title="二、获取 Github 的 Client ID 和密钥"></a>二、获取 Github 的 Client ID 和密钥</h2><p>哪吒监控接入 Github、Gitlab、Gitee 作为后台管理员账号</p>
<h2 id="三、在服务器中安装-Dashboard"><a href="#三、在服务器中安装-Dashboard" class="headerlink" title="三、在服务器中安装 Dashboard"></a>三、在服务器中安装 Dashboard</h2><ul>
<li>在面板服务器中，运行安装脚本：</li>
</ul>
<p>bash</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh  -o nezha.sh &amp;&amp; chmod +x nezha.sh &amp;&amp; sudo ./nezha.sh</span><br></pre></td></tr></table></figure></div>

<p>如果你的面板服务器位于中国大陆，可以使用镜像：</p>
<p>bash</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -L https://gitee.com/naibahq/nezha/raw/master/script/install.sh -o nezha.sh &amp;&amp;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>等待Docker安装完毕后，分别输入以下值：<br><code>OAuth提供商</code> - Github，Gitlab，Gitee 中选择一个<br><code>Client ID</code> - 之前保存的 Client ID<br><code>Client Secret</code> - 之前保存的密钥<br><code>用户名</code> - OAuth 提供商中的用户名<br><code>站点标题</code> - 自定义站点标题<br><code>访问端口</code> - 公开访问端口，可自定义，默认 8008<br><code>Agent的通信端口</code> - Agent 与 Dashboard 的通信端口，默认 5555</p>
</li>
<li><p>输入完成后，等待拉取镜像<br>安装结束后，如果一切正常，此时你可以访问域名+端口号，如 “<a class="link"   href="http://cdn.example.com:8008/" >http://cdn.example.com:8008 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>” 来查看面板</p>
</li>
<li><p>将来如果需要再次运行脚本，可以运行：</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nezha.sh</span><br></pre></td></tr></table></figure></div>

<p>来打开管理脚本</p>
<p>此时就可以通过域名来访问哪吒监控了</p>
<h2 id="四、最好通过docker进行安装"><a href="#四、最好通过docker进行安装" class="headerlink" title="四、最好通过docker进行安装"></a>四、最好通过docker进行安装</h2><h2 id="五、监控节点的安装"><a href="#五、监控节点的安装" class="headerlink" title="五、监控节点的安装"></a>五、监控节点的安装</h2><p>直接在面板的位置进行服务器的新增，然后使用一键安装即可</p>
<h2 id="六、pve可能出现的问题"><a href="#六、pve可能出现的问题" class="headerlink" title="六、pve可能出现的问题"></a>六、pve可能出现的问题</h2><p>文件权限不足，需要进行提权</p>
<h1 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h1><blockquote>
<p>1.可以在管理端进行ssh链接，虽然的github进行了二次的验证但是我还是感觉不太安全</p>
</blockquote>
<p><strong>解决方案：</strong></p>
<ol>
<li>编辑 &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;nezha-agent.service</li>
<li>在“ExecStart&#x3D; ”后加上 “–disable-command-execute”</li>
<li>systemctl daemon-reload</li>
<li>重启Agent</li>
</ol>
<blockquote>
</blockquote>
<h1 id="最后的效果"><a href="#最后的效果" class="headerlink" title="最后的效果"></a>最后的效果</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/65fa527f9f345e8d0304af41.png"
                     
                ></p>
]]></content>
      <categories>
        <category>搭建记录</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>你好贾维斯</title>
    <url>/2024/05/10/%E4%BD%A0%E5%A5%BD%E8%B4%BE%E7%BB%B4%E6%96%AF/</url>
    <content><![CDATA[<h1 id="Hello，Jarvis"><a href="#Hello，Jarvis" class="headerlink" title="Hello，Jarvis"></a>Hello，Jarvis</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://s3.langlangy.com/langlangyblog/708523c1da6b1f58c8d838d4d20dcac3695af3ed.jpg"
                      alt="708523c1da6b1f58c8d838d4d20dcac3695af3ed.jpg"
                ></p>
<h1 id="视频地址"><a href="#视频地址" class="headerlink" title="视频地址"></a><a class="link"   href="https://www.bilibili.com/video/BV1vC411j7En" >视频地址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我心中的真正的人工智能的样子？</p>
<blockquote>
<p>在我心中，理想的人工智能是类似于电影《钢铁侠》中的贾维斯那样的存在。它不仅是一个高效的助手，可以处理各种复杂的任务，而且还能理解和预测我的需求，提供个性化的帮助。它具有自我学习和改进的能力，可以通过与我互动来不断提高其服务质量。更重要的是，这样的人工智能应具备一定的情感理解能力，能够理解人类的情绪，并在与人类的交互中表现出适当的情感反馈。最后，我希望这样的人工智能在满足所有这些功能的同时，还能够严格遵守数据安全和隐私保护的原则，让我在使用的过程中感到安心。</p>
</blockquote>
<p>现在人工智能的一大主要问题</p>
<blockquote>
<p>现在的人工智能（AI）在进行系统级操作方面存在一定的限制。这个问题主要体现在以下几个方面：</p>
<ol>
<li><p><strong>理解和实施复杂任务</strong>：虽然AI可以学习和执行一些特定的、有限的任务，但它们往往在理解和实施复杂、多步骤的任务时遇到困难。例如，AI可能能够理解单个指令，如“打开文件”或“搜索信息”，但可能无法理解或执行更复杂的指令，如“整理这个文件夹并删除所有旧的文件”。</p>
</li>
<li><p><strong>长期记忆和知识转移</strong>：当前的AI系统通常缺乏有效的长期记忆机制，这意味着它们可能无法记住过去的操作或学习经验，并将这些知识应用到新的任务中。这使得AI难以进行系统级的操作，因为这些操作通常需要对过去的信息进行整合和利用。</p>
</li>
<li><p><strong>安全性和隐私问题</strong>：AI进行系统级操作可能会涉及到敏感的信息和关键的系统资源。然而，现有的AI技术可能无法确保这些信息和资源的安全，因为它们可能被恶意利用，或者在无意中泄露用户的隐私。</p>
</li>
<li><p><strong>缺乏通用性</strong>：许多AI系统都是为特定的任务或环境设计的，而不是为广泛的系统级操作设计的。这意味着，尽管这些系统在特定的任务或环境中可能表现良好，但在其他环境或任务中可能表现不佳。</p>
</li>
</ol>
<p>这些问题都是AI进行系统级操作的主要障碍。然而，随着AI技术的不断发展，我期待这些问题在未来得到解决。</p>
</blockquote>
<h1 id="项目推荐"><a href="#项目推荐" class="headerlink" title="项目推荐"></a>项目推荐</h1><p>GitHub地址：<a class="link"   href="https://github.com/OpenInterpreter/open-interpreter" >OpenInterpreter&#x2F;open-interpreter: A natural language interface for computers (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>官网：<a class="link"   href="https://www.openinterpreter.com/" >The Open Interpreter Project <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>why interpreter</p>
<blockquote>
<p>借助大语言模型，Open Interpreter 可在本地运行代码（Python、Javascript、Shell 等），帮你执行各种任务。</p>
<p>它可以在本机调用 GPT-4, GPT-3.5，或者开源免费的 CodeLlama 模型。</p>
<p>安装以后，每次只要打开终端，输入 “interpreter” 这个命令以后，就可以打开类似于 ChatGPT 的聊天界面。</p>
<p>所不同的是，它并不像代码解释器那样是一个封闭的环境。它可以联网，也可以和本地文件交互，因此你不需要上传文件进行分析。而且，如果在分析过程中如果它缺少某些 Python 库，可以联网自行下载。</p>
<p>此外，其他的对于上传文件的大小是有限制的，但 Open Interpreter 却可以和你电脑上任意大的文件进行交互。因此，它对于处理文件非常方便。</p>
</blockquote>
<h1 id="极简部署安装"><a href="#极简部署安装" class="headerlink" title="极简部署安装"></a>极简部署安装</h1><blockquote>
<p>较为推荐使用此方法+key</p>
</blockquote>
<p>Linux上部署</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install open-interpreter</span><br></pre></td></tr></table></figure></div>

<p>Windows上部署</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install open-interpreter</span><br></pre></td></tr></table></figure></div>

<p>mac上部署</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install open-interpreter</span><br></pre></td></tr></table></figure></div>

<p>api的配置</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">OPENAI_API_KEY</span><br><span class="line">OPENAI_API_BASE</span><br></pre></td></tr></table></figure></div>

<h1 id="使用本地模型"><a href="#使用本地模型" class="headerlink" title="使用本地模型"></a>使用本地模型</h1><blockquote>
<p>不是很推荐</p>
</blockquote>
<p>以ollama举例</p>
<p>首先安装ollama</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Download Ollama - https://ollama.ai/download</span><br></pre></td></tr></table></figure></div>

<p>ollama启动某个模型</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ollama run qwen:14b</span><br></pre></td></tr></table></figure></div>

<p>本地模型启动</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">interpreter --model ollama/qwen:14b</span><br></pre></td></tr></table></figure></div>

<h1 id="使用Litellm做接口访问"><a href="#使用Litellm做接口访问" class="headerlink" title="使用Litellm做接口访问"></a>使用Litellm做接口访问</h1><blockquote>
<p>次推荐</p>
</blockquote>
<p>LiteLLM的功能就一句话：使用 OpenAI 格式调用所有 LLM API [Bedrock、Huggingface、VertexAI、TogetherAI、Azure、OpenAI 等]，具体包括：</p>
<ul>
<li>将输入转换为提供者的<code>completion</code>、<code>embedding</code>和<code>image_generation</code>端点</li>
<li><a class="link"   href="https://link.zhihu.com/?target=https://docs.litellm.ai/docs/completion/output" >一致的输出 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，文本响应将始终可用<code>[&#39;choices&#39;][0][&#39;message&#39;][&#39;content&#39;]</code></li>
<li>跨多个部署（例如 Azure&#x2F;OpenAI）的重试&#x2F;回退逻辑 -<a class="link"   href="https://link.zhihu.com/?target=https://docs.litellm.ai/docs/routing" >路由器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>设置每个项目的预算和费率限制、API 密钥、模型<a class="link"   href="https://link.zhihu.com/?target=https://docs.litellm.ai/docs/simple_proxy" >OpenAI 代理服务器 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>项目地址：<a class="link"   href="https://github.com/BerriAI/litellm" >BerriAI&#x2F;litellm: Call all LLM APIs using the OpenAI format. Use Bedrock, Azure, OpenAI, Cohere, Anthropic, Ollama, Sagemaker, HuggingFace, Replicate (100+ LLMs) (github.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h1 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h1><ul>
<li><input disabled="" type="checkbox"> 接入语音</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>费曼学习法的自我认识</title>
    <url>/2024/05/09/%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95%E7%9A%84%E8%87%AA%E6%88%91%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h1 id="费曼学习方法的自我认识"><a href="#费曼学习方法的自我认识" class="headerlink" title="费曼学习方法的自我认识"></a>费曼学习方法的自我认识</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/feiman.jpg"
                     
                ></p>
<p>认知会改变心理，心理会影响行为，主要是从这三点出发，进行分析和总结</p>
<div class="tabs" id="tab-first-unique-name"><ul class="nav-tabs"><li class="tab active"><a class="#first-unique-name-1">认知</a></li><li class="tab"><a class="#first-unique-name-2">心理</a></li><li class="tab"><a class="#first-unique-name-3">Third Tab</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p>你就是要认为自己别人聪明，你的观众，你的学生都是笨蛋，你要想怎么教会他们，如果你能教会笨蛋的话，那么教会自己这么聪明的人就是非常简单 </p></div><div class="tab-pane" id="first-unique-name-2"><p>通过认知我们可以产生什么样的心理: </p>
<p><strong>1.优越感（记住是正向的优越感）</strong></p>
<p><strong>2.教学和教会学生的成就感</strong>.</p>
<p><strong>3.增加自信心</strong></p></div><div class="tab-pane" id="first-unique-name-3"><p><strong>心理会影响行为，落实行为可以具体成某个或者某些行为</strong></p>
<p><strong>比如：我们可以写讲义或者是博客。在此基础上通过现在流行的视频平台可以去做讲解视频</strong></p>
<p><strong>可以先从基础讲解，用通俗易懂的方法去讲解</strong></p>
<p><strong>再用高级的方法去讲解（串联起你的前后知识库），按照你的理解重排知识点，以观众更好理解的方式去进行讲解</strong></p></div></div></div>

<p><strong>maki</strong>老师说了两句话让我觉得很好：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">决定一个函数从来不是当前值,而是斜率，哪怕你的值是很小，有向上的斜率，那么也是在进步</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">大部分厉害的数学家也都是优秀的教育家，不是因为他是一名好的数学家才教得好，而是本身是一名好的教育学家才更容易帮助他成为一名优秀的数学家</span><br><span class="line">发散一下这种思维，你要是想成为厉害的Coder，不妨先从写文档，出视频开始</span><br></pre></td></tr></table></figure></div>

<p>两句话与诸君共勉</p>
]]></content>
      <categories>
        <category>学习方法 - 费曼学习方法</category>
      </categories>
      <tags>
        <tag>学习方法</tag>
      </tags>
  </entry>
</search>
